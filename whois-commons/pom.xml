<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

    <parent>
        <groupId>net.ripe.db</groupId>
        <artifactId>whois</artifactId>
        <version>1.0-SNAPSHOT</version>
    </parent>

    <modelVersion>4.0.0</modelVersion>
    <artifactId>whois-commons</artifactId>
    <packaging>jar</packaging>

    <properties>
        <project.basedir.escaped>xxx</project.basedir.escaped>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context-support</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-aop</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-jdbc</artifactId>
        </dependency>
        <dependency>
            <groupId>org.aspectj</groupId>
            <artifactId>aspectjrt</artifactId>
        </dependency>
        <dependency>
            <groupId>org.aspectj</groupId>
            <artifactId>aspectjweaver</artifactId>
        </dependency>
        <dependency>
            <groupId>commons-lang</groupId>
            <artifactId>commons-lang</artifactId>
        </dependency>
        <dependency>
            <groupId>commons-net</groupId>
            <artifactId>commons-net</artifactId>
        </dependency>
        <dependency>
            <groupId>commons-codec</groupId>
            <artifactId>commons-codec</artifactId>
        </dependency>
        <dependency>
            <groupId>commons-io</groupId>
            <artifactId>commons-io</artifactId>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-log4j12</artifactId>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>jul-to-slf4j</artifactId>
        </dependency>
        <dependency>
            <groupId>log4j</groupId>
            <artifactId>log4j</artifactId>
        </dependency>
        <dependency>
            <groupId>log4j</groupId>
            <artifactId>apache-log4j-extras</artifactId>
        </dependency>
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
        </dependency>
        <dependency>
            <groupId>io.netty</groupId>
            <artifactId>netty</artifactId>
        </dependency>
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
        </dependency>
        <dependency>
            <groupId>c3p0</groupId>
            <artifactId>c3p0</artifactId>
        </dependency>
        <dependency>
            <groupId>joda-time</groupId>
            <artifactId>joda-time</artifactId>
        </dependency>
        <dependency>
            <groupId>org.jetbrains</groupId>
            <artifactId>annotations</artifactId>
        </dependency>
        <dependency>
            <groupId>net.sf.jopt-simple</groupId>
            <artifactId>jopt-simple</artifactId>
        </dependency>
        <dependency>
            <groupId>com.googlecode.java-diff-utils</groupId>
            <artifactId>diffutils</artifactId>
        </dependency>
        <dependency>
            <groupId>de.jflex</groupId>
            <artifactId>jflex</artifactId>
        </dependency>
        <dependency>
            <groupId>javax.validation</groupId>
            <artifactId>validation-api</artifactId>
            <version>1.1.0.Final</version>
        </dependency>

        <!-- test -->

        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-compress</artifactId>
            <scope>test</scope>
        </dependency>

    </dependencies>
    <build>
        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <filtering>true</filtering>
                <includes>
                    <include>**/version.properties</include>
                </includes>
            </resource>
            <resource>
                <directory>src/main/resources</directory>
                <filtering>false</filtering>
                <excludes>
                    <exclude>**/version.properties</exclude>
                </excludes>
            </resource>
        </resources>
        <plugins>
            <!-- project.basedir path - backslashes need escaping for windows -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>properties-maven-plugin</artifactId>
                <version>1.0-alpha-2</version>
                <executions>
                    <execution>
                        <phase>initialize</phase>
                        <goals>
                            <goal>set-system-properties</goal>
                        </goals>
                        <configuration>
                            <properties>
                                <property>
                                    <name>project.basedir.property</name>
                                    <value>${project.basedir}</value>
                                </property>
                            </properties>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-enforcer-plugin</artifactId>
                <version>1.3.1</version>
                <executions>
                    <execution>
                        <id>generate-byaccs</id>
                        <goals>
                            <goal>enforce</goal>
                        </goals>
                        <phase>generate-sources</phase>
                        <configuration>
                            <rules>
                                <evaluateBeanshell>
                                    <condition><![CDATA[
                                    boolean success = false;

                                    String[] targets = new String[] {
                                        "AggrBndryParser", "AggrMtdParser", "ComponentsParser", "ComponentsR6Parser",
                                        "DefaultParser", "ExportParser", "ExportViaParser", "FilterParser", "IfaddrParser",
                                        "ImportParser", "ImportViaParser", "InjectParser", "InjectR6Parser", "InterfaceParser",
                                        "MpDefaultParser", "MpExportParser", "MpFilterParser", "MpImportParser",
                                        "MpPeerParser", "MpPeeringParser", "PeerParser", "PeeringParser", "V6FilterParser" };

                                    // Use the properties-maven-plugin defined basedir system property
                                    // Inlining maven $[project.basedir] wont work due to the
                                    // unescaped backslashes in the filepath string (for windows only)
                                    String mavenBaseDir = System.getProperty("project.basedir.property").replace("\\", "/");
                                    String basePath = new File(mavenBaseDir).getAbsolutePath();
                                    System.out.println("Base Path=" + basePath);
                                    String genPath = "/target/generated-sources/jflex/net/ripe/db/whois/common/generated";
                                    String PACKAGE_NAME = "net.ripe.db.whois.common.generated";

                                    String BIN_PATH =  new File(basePath + "/src/main/parser/bin").getAbsolutePath();
                                    String GENERATED_PATH = new File(basePath + genPath).getAbsolutePath();
                                    String YACC_FILES_PATH = new File(basePath + "/src/main/parser/byacc").getAbsolutePath();
                                    File MAKE_EXE_PATH = new File(basePath + "/src/main/parser/byaccj-p2/src");

                                    // Make generated dir
                                    File generatedDir = new File(GENERATED_PATH);
                                    generatedDir.mkdirs();
                                    System.out.println("Generating in path: " + generatedDir.getAbsolutePath());

                                    File executableFile = null;
                                    String OS_NAME = System.getProperty("os.name").toLowerCase();
                                    String OS_ARCH = System.getProperty("os.arch").toLowerCase();

                                    if (OS_NAME.startsWith("windows")) {
                                        executableFile = new File(BIN_PATH + "/yacc.com");
                                    } else if (OS_NAME.startsWith("linux")) {
                                        if (OS_ARCH.equals("i386")) {
                                            executableFile = new File(BIN_PATH + "/yacc.linux");
                                        }
                                    } else if (OS_NAME.startsWith("mac")) {
                                        executableFile = new File(BIN_PATH + "/yacc.macosx");
                                    }

                                    if (executableFile == null || !executableFile.exists()) {
                                        executableFile = null;
                                        // Try building executable instead
                                        try {
                                            System.err.println("WARNING: suitable yacc binary not found - will compile the byaccj-p2 tool");
                                            System.err.println("WARNING: you will need make+gcc");
                                            String[] makeExe = new String[] { "make" };
                                            if (new ProcessBuilder(Arrays.asList(makeExe)).directory(MAKE_EXE_PATH).start().waitFor() != 0) {
                                               throw new Exception("yacc binary make failed");
                                            }
                                            executableFile = new File(BIN_PATH + "/yacc");
                                            String[] cpExe = new String[] { "cp", "yacc", executableFile.getAbsolutePath() };
                                            if (new ProcessBuilder(Arrays.asList(cpExe)).directory(MAKE_EXE_PATH).start().waitFor() != 0) {
                                               throw new Exception("yacc binary cp failed");
                                            }
                                            System.out.println("Done building byaccj-p2");
                                        } catch (Exception ex) {
                                            System.err.println("Error: " + ex.getMessage());
                                            System.err.println("OS/ARCH not supported: " + OS_NAME + "-" + OS_ARCH);
                                        }
                                    }

                                    if (executableFile != null) {
                                        String executablePath = executableFile.getAbsolutePath();
                                        boolean allProcessed = true;

                                        // Check if we've already generated source
                                        if (generatedDir.listFiles().length >= targets.length) {
                                            System.out.println("Parser source generation skipped since files already exist");
                                        } else {
                                            System.out.println("Generating files [" + targets.length + "]");
                                            for (String target : targets) {
                                                String yaccFile = new File( YACC_FILES_PATH + "/" + target + ".y").getAbsolutePath();
                                                String[] args = new String[] {
                                                        executablePath, "-Jclass=" + target, "-Jnoconstruct",
                                                        "-Jimplements=AttributeParser<Void>",
                                                        "-Jpackage=" + PACKAGE_NAME,  "-J", yaccFile
                                                };
                                                try {
                                                    System.out.println("Generating " + target + ".java");
                                                    new ProcessBuilder(Arrays.asList(args)).directory(generatedDir).start().waitFor();
                                                } catch (Exception ex) {
                                                    allProcessed = false;
                                                    System.err.println("Error generating sources [" + ex.getMessage() + "]");
                                                }
                                           }
                                       }
                                       success = allProcessed;
                                    }
                                    success == true;
                                    ]]>
                                    </condition>
                                </evaluateBeanshell>
                            </rules>
                            <fail>true</fail>
                        </configuration>
                    </execution>
                </executions>
                <configuration>
                    <rules>
                        <evaluateBeanshell>
                            <condition><![CDATA[
                                // Put your tinkery code in here if calling the plugin directly
                                1 == 1;
                            ]]>
                            </condition>
                        </evaluateBeanshell>
                    </rules>
                    <fail>true</fail>
                </configuration>
            </plugin>
            <plugin>
                <groupId>de.jflex</groupId>
                <artifactId>maven-jflex-plugin</artifactId>
                <version>1.4.3-r1</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>generate</goal>
                        </goals>
                        <configuration>
                            <lexDefinitions>
                                <lexDefinition>src/main/parser/jflex</lexDefinition>
                            </lexDefinitions>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>
